{
  "info": {
    "_postman_id": "27f1be5e-7401-4f3d-9e4a-a6e2e733bfc5",
    "name": "PlaceLab_API_Testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23441909"
  },
  "item": [
    {
      "name": "SmokeTest",
      "item": [
        {
          "name": "Generate Auth Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"accessToken\", responseJSON.api_token);\r",
                  "\r",
                  "pm.test(\"Verify Authentication response\", () => {\r",
                  "\r",
                  "pm.expect(pm.response.code).to.eql(201)\r",
                  "\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "{{email}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/v2/sessions",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "sessions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Data Extraction Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"reportID\", responseJSON.id);\r",
                  "\r",
                  "pm.test(\"Verify Authentication response\", () => {\r",
                  "\r",
                  "pm.expect(pm.response.code).to.eql(201)\r",
                  "\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{accessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "QAmp_API_Testing/resources/data_extraction_sample.txt"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/v2/reports/data_extraction?name=Data%20Extraction%20Report%20{{$randomInt}}&country_code=US&categorization_column=CATEGORIES&categorization_column_index=0&standardizer=plab&threshold=0.3&limit=5",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "reports",
                "data_extraction"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "Data%20Extraction%20Report%20{{$randomInt}}"
                },
                {
                  "key": "country_code",
                  "value": "US"
                },
                {
                  "key": "categorization_column",
                  "value": "CATEGORIES"
                },
                {
                  "key": "categorization_column_index",
                  "value": "0"
                },
                {
                  "key": "standardizer",
                  "value": "plab"
                },
                {
                  "key": "threshold",
                  "value": "0.3"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check Data Extraction Report Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.test(\"Stastus code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "if (responseJSON.state != \"FINISHED\") {\r",
                  "\r",
                  "    console.log(\"Retry request\");\r",
                  "    retryRequest();\r",
                  "    return;\r",
                  "} else {\r",
                  "    validateResponse();\r",
                  "    return;\r",
                  "}\r",
                  "\r",
                  "function retryRequest () {\r",
                  "    if (responseJSON.state != \"INVALID FILE\") {\r",
                  "        postman.setNextRequest(pm.info.requestId);\r",
                  "    } else {\r",
                  "        validateResponse();\r",
                  "        return;\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "function validateResponse () {\r",
                  "    pm.test(\"Verify response\", () => {\r",
                  "        pm.expect(pm.response.code).to.eql(200);\r",
                  "        pm.expect(responseJSON.state).to.a('string');\r",
                  "        pm.expect(responseJSON.state).to.eql('FINISHED');\r",
                  "    });\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/v2/reports/{{reportID}}/status",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "reports",
                "{{reportID}}",
                "status"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download Data Extraction Result",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse the response body\r",
                  "const responseBody6 = pm.response.text();\r",
                  "\r",
                  "// Split the response body into lines\r",
                  "const lines = responseBody6.split('\\n');\r",
                  "\r",
                  "// Define the variable to store the parsed data\r",
                  "let parsedData = [];\r",
                  "\r",
                  "// Iterate over each line starting from the second line (skipping the header)\r",
                  "for (let i = 1; i < lines.length; i++) {\r",
                  "  const line = lines[i];\r",
                  "  if (line.trim().length > 0) {\r",
                  "    // Split the line by '|'\r",
                  "    const data = line.split('|');\r",
                  "    \r",
                  "    // Extract the required fields\r",
                  "    const website = data[0];\r",
                  "    const name = data[1];\r",
                  "    const status = data[2];\r",
                  "    const categories = data[3].split(';');\r",
                  "    const extractedNames = data[4].split(';');\r",
                  "    const extractedPhones = data[5].split(';');\r",
                  "    const extractedAddresses = data[6].split(';');\r",
                  "    const extractedEmails = data[7].split(';');\r",
                  "    const extractedGeopoints = data[8].split(';');\r",
                  "    const hoursOfOperation = data[9];\r",
                  "    const fbProfile = data[10];\r",
                  "    const twProfile = data[11];\r",
                  "    const lnProfile = data[12];\r",
                  "    const liveChatExists = data[13];\r",
                  "    const brandId = data[14];\r",
                  "    const brandName = data[15];\r",
                  "    const contactEmails = data[16].split(';');\r",
                  "    const businessIdCrawled = data[17];\r",
                  "    const businessIdInput = data[18];\r",
                  "    const businessPhone = data[19];\r",
                  "    const businessIntent = data[20];\r",
                  "    const businessGroupId = data[21];\r",
                  "    const bannerCta = data[22];\r",
                  "    const bannerContext = data[23];\r",
                  "    const textFontFamily = data[24];\r",
                  "    const bannerTextColor = data[25];\r",
                  "    const bannerBgColor = data[26];\r",
                  "    const bannerIconBgColor = data[27];\r",
                  "    const bannerIconColor = data[28];\r",
                  "    const bannerScale = data[29];\r",
                  "    const iconBgColor = data[30];\r",
                  "    const iconColor = data[31];\r",
                  "    const iconScale = data[32];\r",
                  "    const iconTitle = data[33];\r",
                  "    const thirdParty = data[34];\r",
                  "    const version = data[35];\r",
                  "    \r",
                  "    // Create an object with the extracted data\r",
                  "    const parsedItem = {\r",
                  "      website,\r",
                  "      name,\r",
                  "      status,\r",
                  "      categories,\r",
                  "      extractedNames,\r",
                  "      extractedPhones,\r",
                  "      extractedAddresses,\r",
                  "      extractedEmails,\r",
                  "      extractedGeopoints,\r",
                  "      hoursOfOperation,\r",
                  "      fbProfile,\r",
                  "      twProfile,\r",
                  "      lnProfile,\r",
                  "      liveChatExists,\r",
                  "      brandId,\r",
                  "      brandName,\r",
                  "      contactEmails,\r",
                  "      businessIdCrawled,\r",
                  "      businessIdInput,\r",
                  "      businessPhone,\r",
                  "      businessIntent,\r",
                  "      businessGroupId,\r",
                  "      bannerCta,\r",
                  "      bannerContext,\r",
                  "      textFontFamily,\r",
                  "      bannerTextColor,\r",
                  "      bannerBgColor,\r",
                  "      bannerIconBgColor,\r",
                  "      bannerIconColor,\r",
                  "      bannerScale,\r",
                  "      iconBgColor,\r",
                  "      iconColor,\r",
                  "      iconScale,\r",
                  "      iconTitle,\r",
                  "      thirdParty,\r",
                  "      version\r",
                  "    };\r",
                  "    \r",
                  "    // Push the parsed item to the array\r",
                  "    parsedData.push(parsedItem);\r",
                  "  }\r",
                  "}\r",
                  "\r",
                  "// Log the parsed data for verification\r",
                  "console.log(parsedData);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseURL}}/api/v2/reports/181814/download",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "reports",
                "181814",
                "download"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Smoke test - API Testing of demo application PlaceLab.\n\nGIVEN user provides valid email and password, user is able to log into the application.\n\nWHEN user provides \"sample file\" that contains list of websites that we want collection of data we send a request to collect data from wesite.\n\nTHAN user can check the report, provide needed information about report and download collected data i choosen format."
    },
    {
      "name": "LoginTestCases",
      "item": [
        {
          "name": "API status check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseURL}}",
              "host": [
                "{{baseURL}}"
              ]
            },
            "description": "First request is API status check request that confirms us is baseURL available so we can use it for further API testing. Base URL is set as a variable.\n\nAs a response we'll get HTML of requsted website with all of it's contents."
          },
          "response": []
        },
        {
          "name": "Generate Auth Token",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "{{email}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/v2/sessions",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "sessions"
              ]
            },
            "description": "This request is sent in order to generate authentification token that we'll use in further API testing of this application.\n\nThis request requires authentification with valid parameters email and password in order for API Token to be created.\n\nbaseURL endpoint is /api/v2/sessions\n\nValid email, password and baseURL are set in variables of PlaceLab environment.\n\nExpected response of this request is generated API Token in JSON format.\n\nActual response of this request is generated API Token in JSON format.\n\nGenerated API Token is also set as variable in PlaceLab environment for further use as \"accessToken\"."
          },
          "response": []
        },
        {
          "name": "LoginTestWithRandomEmailAndPassword",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "{{$randomEmail}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{$randomPassword}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/v2/sessions",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "sessions"
              ]
            },
            "description": "Test case: Login test with random email and password\n\nThis request is sent in order to check login functionality providing random email and password.\n\nFor this purpose we used $random variables from Postman for email and password.\n\nbaseURL endpoint is /api/v2/sessions\n\nExpected response: 401 Unauthorized, error: \"Password mismatch\" in JSON format.\n\nActual response: 401 Unauthorized, error: \"Password mismatch\" in JSON format."
          },
          "response": []
        },
        {
          "name": "LoginTestWithRandomEmailAndValidPassword",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "{{$randomEmail}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/v2/sessions",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "sessions"
              ]
            },
            "description": "Test case: Login test with random email and valid password\n\nThis request is sent in order to check login functionality providing random email and valid password.\n\nFor this purpose we used $random variables from Postman for email and valid password.\n\nbaseURL endpoint is /api/v2/sessions\n\nExpected response: 401 Unauthorized, error: \"Password mismatch\" in JSON format.\n\nActual response: 401 Unauthorized, error: \"Password mismatch\" in JSON format."
          },
          "response": []
        },
        {
          "name": "LoginTestWithValidEmailAndRandomPassword",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "{{email}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{$randomPassword}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/v2/sessions",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "sessions"
              ]
            },
            "description": "Test case: Login test with valid email and random password\n\nThis request is sent in order to check login functionality providing valid email and random password.\n\nFor this purpose we used $random variables from Postman for password and valid email.\n\nbaseURL endpoint is /api/v2/sessions\n\nExpected response: 401 Unauthorized, error: \"Password mismatch\" in JSON format.\n\nActual response: 401 Unauthorized, error: \"Password mismatch\" in JSON format."
          },
          "response": []
        },
        {
          "name": "LoginTestWithEmptyCredentialsForEmailAndPassword",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/api/v2/sessions",
              "host": [
                "{{baseURL}}"
              ],
              "path": [
                "api",
                "v2",
                "sessions"
              ]
            },
            "description": "Test case: Login test with empty credentials for email and password.\n\nThis request is sent in order to check login functionality providing empty credentials for email and password.\n\nbaseURL endpoint is /api/v2/sessions\n\nExpected response: 401 Unauthorized, error: \"Password mismatch\" in JSON format.\n\nActual response: 401 Unauthorized, error: \"Password mismatch\" in JSON format."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseURL",
      "value": "https://go.placelab.com"
    },
    {
      "key": "password",
      "value": ""
    }
  ]
}